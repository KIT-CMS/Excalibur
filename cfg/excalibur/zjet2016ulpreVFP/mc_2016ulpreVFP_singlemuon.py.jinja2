import configtools
import os
JEC = '{{ jec }}'
JER = '{{ jer }}'
IOV = ''  # needed for getting hotjets file, overwritten down below anyways


def config():
    cfg = configtools.getConfig('mc', {{ year }}, 'mm', JEC=JEC, JER=JER, IOV=IOV)
    cfg["InputFiles"] = {{ dataset_files }}
    cfg = configtools.expand(cfg, ['zjetcuts', 'genzjetcuts'], ['None', 'L1L2L3'])
    configtools.remove_quantities(cfg, [
        'jet1area', 'jet1l1', 'jet1rc', 'jet1l2', 'jet1ptraw', 'jet1ptl1',
        'mpf', 'rawmpf', 'rawmet', 'rawmetphi', 'sumet', 'mettype1vecpt', 'mettype1pt',
        ])
    configtools.add_quantities(cfg, [
        "mu1pt", "mu1eta", "mu1phi", "mu2pt", "mu2eta", "mu2phi",
        "genmu1pt", "genmu1eta", "genmu1phi", "genmu2pt", "genmu2eta", "genmu2phi",
        "leptonRecoSFWeight", "leptonRecoSFWeightUp", "leptonRecoSFWeightDown",
        "leptonIsoSFWeight", "leptonIsoSFWeightUp", "leptonIsoSFWeightDown",
        "leptonIDSFWeight", "leptonIDSFWeightUp", "leptonIDSFWeightDown",
        "leptonTriggerSFWeight", "leptonTriggerSFWeightUp", "leptonTriggerSFWeightDown",
        "puJetIDWeight", "puJetIDWeightUp", "puJetIDWeightDown",
        "prefiringWeight", "prefiringWeightUp", "prefiringWeightDown",
        "crossSectionPerEventWeightDown", "crossSectionPerEventWeightUp",
        "njets20", "nmuons", "jet1puidraw", "puJetIDWeight",
        "genWeight_isrDefup", "genWeight_isrDefdown", "genWeight_fsrDefup", "genWeight_fsrDefdown",
        "lheNOutPartons",
        "puWeightUp", "puWeightDown",
    ])
    # remove Pipelines without JEC, removing None from expand above creates invalid configs...
    for rm in ['zjetcuts', 'genzjetcuts']:
        cfg['Pipelines'].pop(rm)

    # add generator Weights
    cfg['Processors'] += ['producer:ZJetGenWeightProducer']
    cfg['ZJetGenWeightNames'] = {{ scale_weights }} + {{ pdf_weights }} + {{ ps_weights }}
    configtools.add_quantities(cfg, {{ gen_weights_scale }})
    configtools.add_quantities(cfg, {{ gen_weights_pdf }})
    configtools.add_quantities(cfg, {{ gen_weights_ps }})

    ##### Set Trigger: ######
    cfg['Processors'].remove("filter:HltFilter")
    cfg['HltPaths'] = ['HLT_IsoMu24', 'HLT_IsoTkMu24']
    for cut in ['zjetcuts_L1L2L3']:
        cfg['Pipelines'][cut]['Processors'] = ["filter:HltFilter"] + cfg['Pipelines'][cut]['Processors']

    ##### Add Producers: #####
    # Add METFilters only on reco level
    cfg['Pipelines']['zjetcuts_L1L2L3']['Processors'] += ['filter:METFiltersFilter']
    cfg['METFilterNames'] = ["Flag_goodVertices", "Flag_globalSuperTightHalo2016Filter", "Flag_HBHENoiseFilter", "Flag_HBHENoiseIsoFilter",
                             "Flag_EcalDeadCellTriggerPrimitiveFilter", "Flag_BadPFMuonFilter", "Flag_BadPFMuonDzFilter", "Flag_eeBadScFilter"]

    # Apply Muon Corrections
    cfg['Processors'].insert(cfg['Processors'].index('producer:ValidMuonsProducer'), 'producer:MuonCorrectionsProducer')
    # Dress Muons
    cfg['Processors'].insert(cfg['Processors'].index('producer:ValidMuonsProducer'), 'producer:PFCandidatesProducer')
    cfg['Processors'].insert(cfg['Processors'].index('producer:ValidMuonsProducer')+1, 'producer:ZJetDressedMuonsProducer')
    cfg['Processors'].insert(cfg['Processors'].index('producer:GenZmmProducer'), 'producer:ZJetGenPhotonsProducer')
    cfg['Processors'].insert(cfg['Processors'].index('producer:GenZmmProducer'), 'producer:ZJetDressedGenMuonsProducer')

    cfg['Processors'].insert(cfg['Processors'].index('producer:ZJetCorrectionsProducer')+1, 'producer:PrefiringWeightProducer')

    # Add LeptonSF Producers
    for prod in ['producer:LeptonRecoSFProducer', 'producer:LeptonIDSFProducer', 'producer:LeptonIsoSFProducer', 'producer:LeptonTriggerSFProducer']:
        cfg['Processors'].insert(cfg['Processors'].index('producer:EventWeightProducer'), prod)

    # Jet Producers
    cfg['Processors'].insert(cfg['Processors'].index('producer:ZJetCorrectionsProducer')+1, 'producer:ValidZllJetsProducer')
    cfg['Processors'].insert(cfg['Processors'].index('producer:GenZmmProducer')+1, 'producer:ValidZllGenJetsProducer')
    cfg['Processors'] += ['producer:PUJetIDWeightProducer']

    ##### Specify input sources for Jets & Muons: #####
    cfg['VertexSummary'] = 'offlinePrimaryVerticesSummary'
    cfg['MaxZJetDressedMuonDeltaR'] = 0.1
    cfg['ValidMuonsInput'] = "corrected"
    cfg['PackedPFCandidates'] = 'pfCandidates'

    ##### Jets
    cfg['GenJets'] = 'ak{{ jet_radius }}GenJets'
    cfg['TaggedJets'] = 'ak{{ jet_radius }}PFJetsCHS'
    cfg['Jec'] = os.path.join(configtools.getPath(), '../JECDatabase/textFiles/{{ jec }}/{{ jec }}')

    cfg['JetIDVersion'] = 'UL2016'
    cfg['JetID'] = 'tightlepveto'

    cfg['PUJetIDModuleName'] = "pileupJetIdUpdated"
    cfg['PUJetID'] = 'tight'
    # cfg['PUJetID'] = 'file'
    # cfg['MinPUJetIDFile'] = os.path.join(configtools.getPath(), "data/pujetid/puJetIDMVAWorkingPoints.root")
    # cfg['MinPUJetIDHistogramName'] = "puJetIDMVAWorkingPoint_AK4PFCHS_2016UL_Tight"
    cfg['PUJetIDEffFilename'] = os.path.join(configtools.getPath(),"data/scalefactors/run2UL/PUID_106XTraining_ULRun2_EffSFandUncties_v1.root")
    cfg['PUJetIDEffHistogramName'] = 'h2_eff_sfUL2016APV_T'
    cfg['PUJetIDEffErrHistogramName'] = 'h2_eff_sfUL2016APV_T_Systuncty'

    cfg['JetLeptonLowerDeltaRCut'] = 0.4
    cfg['OnlyCleanZLeptons'] = True

    cfg['CutLeadingJetPtMin'] = 10.0

    cfg['UseObjectJetYCut'] = True
    cfg['UseObjectJetEtaCut'] = False
    cfg['CutLeadingJetYMax'] = 2.4

    cfg['EnableTypeIModification'] = False  # disable TypeIMET corrections, not recommended
    cfg['JetEtaPhiCleanerFile'] = os.path.join(configtools.getPath(), "data/cleaning/jec16ul/Summer19UL16_V0/hotjets-UL16.root")
    cfg['JetEtaPhiCleanerHistogramNames'] = ["h2hot_ul16_plus_hbm2_hbp12_qie11", "h2hot_mc"]
    cfg['JetEtaPhiCleanerHistogramValueMaxValid'] = 9.9   # >=10 means jets should be invalidated

    # MC specific
    cfg['JetEnergyCorrectionUncertaintySource'] = '{{ jec_unc }}'
    cfg['JetEnergyCorrectionUncertaintyShift'] = {{ jec_unc_shift }}
    cfg['DeltaRMatchingRecoMuonGenParticle'] = 0.2
    cfg['DeltaRMatchingRecoJetGenJet'] = 0.2
    cfg["JERMethod"] = "hybrid"
    cfg["JERShift"] = {{ jer_shift }}

    ##### Change selection: (see also http://cms.cern.ch/iCMS/analysisadmin/cadilines?line=SMP-17-002&tp=an&id=1891&ancode=SMP-17-002) #####
    cfg['MuonID'] = 'tight'
    cfg['MuonIso'] = 'tight'
    cfg['CutMuonPtMin'] = 25.0
    cfg['CutMuonEtaMax'] = 2.4
    cfg['MuonRochesterCorrectionsFile'] = os.path.join(configtools.getPath(), '../Artus/KappaAnalysis/data/rochcorr/{{ roccor }}')
    cfg['MuonEnergyCorrection'] = 'rochcorr{{ year }}ul'
    cfg['ZMassRange'] = 25.0
    cfg['CutZPtMin'] = 25.0

    ##### LeptonSF files: #####
    cfg['LeptonSFVariation'] = True
    # Reco efficiencies
    cfg['LeptonRecoSFYear'] = '2016APV'

    # ID efficiencies
    cfg['LeptonIDSFRootfile'] = os.path.join(configtools.getPath(),"data/scalefactors/2016ul_preVFP/Efficiencies_muon_generalTracks_Z_Run2016_UL_HIPM_ID.root")
    cfg['LeptonIDSFHistogramName'] = 'NUM_TightID_DEN_TrackerMuons_abseta_pt'

    # ISO efficiencies
    cfg['LeptonIsoSFRootfile'] = os.path.join(configtools.getPath(),"data/scalefactors/2016ul_preVFP/Efficiencies_muon_generalTracks_Z_Run2016_UL_HIPM_ISO.root")
    cfg['LeptonIsoSFHistogramName'] = 'NUM_TightRelIso_DEN_TightIDandIPCut_abseta_pt'

    # Trigger efficiencies
    cfg['LeptonTriggerSFRootfile'] = os.path.join(configtools.getPath(),"data/scalefactors/2016ul_preVFP/Efficiencies_muon_generalTracks_Z_Run2016_UL_HIPM_SingleMuonTriggers.root")
    cfg['LeptonTriggerSFHistogramName'] = 'NUM_IsoMu24_or_IsoTkMu24_DEN_CutBasedIdTight_and_PFIsoTight_eta_pt'

    ##### Prefiring Weights ######
    cfg['DataEraECAL'] = "UL2016preVFP"
    cfg['DataEraMuon'] = "2016preVFP"
    cfg['PrefiringL1MapsPath'] = os.path.join(configtools.getPath(),"data/prefiring/L1PrefiringMaps.root")
    cfg['L1MuonParametrizationsPath'] = os.path.join(configtools.getPath(),"data/prefiring/L1MuonPrefiringParametrisations.root")

    ##### MC specific properties: #####
    cfg['NumberGeneratedEvents'] = {{ number_generated_events }}
    cfg['GeneratorWeight'] = {{ generator_weight }} 
    cfg['CrossSection'] = {{ cross_section }}
    cfg['CrossSectionUp'] = {{ cross_section_up }}
    cfg['CrossSectionDown'] = {{ cross_section_down }}
    # PileUP reweighting, use additional Excalbur Producer for variations
    cfg['PileupWeightFile'] = '{{ pileup_weight_file }}'
    cfg['Processors'] += ['producer:ZJetPUWeightProducer']
    cfg['ZJetPUWeightFiles'] = ['{{ pileup_weight_file_up }}', '{{ pileup_weight_file_down }}']
    cfg['ZJetPUWeightSuffixes'] = ['Up', 'Down']

    return cfg
